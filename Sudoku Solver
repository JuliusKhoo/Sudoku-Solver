#list of lists board. Each contained list represents one sudoku line.
board = [
    [7,8,0,4,0,0,1,2,0],
    [6,0,0,0,7,5,0,0,9],
    [0,0,0,6,0,1,0,7,8],
    [0,0,7,0,4,0,2,6,0],
    [0,0,1,0,5,0,9,3,0],
    [9,0,4,0,6,0,0,0,5],
    [0,7,0,3,0,0,0,1,2],
    [1,2,0,0,0,7,4,0,0],
    [0,4,9,2,0,6,0,0,7]
]

#uses recursion and several helper functions to solve the board.
#checks if the board is solved, and if not, returns a tuple of row, col from helper function 'find_empty'. 
def solve(bo):
    find = find_empty(bo)
    if not find:
        return True
    else:
        row, col = find

#if empty value is found, fills the value with any possible valid value. Validity is determined through 'valid' helper function.
#recursively updates values to 0 if subsequent squares fail to produce results that are valid.
    for i in range(1,10):
        if valid(bo, i, (row, col)):
            bo[row][col] = i

            if solve(bo):
                return True

            bo[row][col] = 0

    return False

#checks if a number can be placed into a square without breaking sudoku rules.
def valid(bo, num, pos):
    #Checks row
    for i in range(len(bo[0])):
        if bo[pos[0]][i] == num and pos[1] != i:
            return False

    #Checks column
    for i in range(len(bo)):
        if bo[i][pos[1]] == num and pos[0] != i:
            return False

    #Checks 3x3 square
    x_box = (pos[1] // 3)
    y_box = (pos[0] // 3)
    for i in range(y_box*3, y_box*3+3):
        for j in range(x_box*3, x_box*3+3):
            if bo[i][j] == num and (i,j) != pos:
                return False

    return True

#serves as a visual aid to create a simple graphic of the sudoku board.
def print_board(bo):

    for i in range(len(bo)):
        if i % 3 == 0 and i != 0:
            print("- - - - - - - - - - - -")

        for j in range(len(bo[0])):
            if j % 3 == 0 and j != 0:
                print(" | ", end ="")

            if j == 8:
                print(bo[i][j])
            else:
                 print(str(bo[i][j]) + " ", end = "")

#runs through the board and scans for empty values. this includes values that have been reset to 0 if they turn out to later be invalid. 
def find_empty(bo):
    for i in range(len(bo)):
        for j in range(len(bo[0])):
            if bo[i][j] == 0:
                return (i, j) #row, column

    return None

print_board(board)
solve(board)
print("_______________________")
print_board(board)



